{"version":3,"sources":["components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["CardList","robots","Error","SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAyBeA,EAtBE,SAAC,GAAe,EAAbC,OAEZ,MAAM,IAAIC,MAAM,aCSTC,EAZG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,qBAAKC,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,OCEXK,EATA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAAtE,SACKJ,EAAMK,YCiBJC,E,kDAnBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,qDAOnB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG9B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,0DAEJG,KAAKX,MAAMK,a,GAhBCQ,aC4CZC,G,wDArCX,aAAe,IAAD,8BACV,gBAWJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEnB,YAAauB,EAAMC,OAAOC,SAX1C,EAAKX,MAAQ,CACTjB,OAAQ,GACRG,YAAa,IAJP,E,qDAOd,WAAqB,IAAD,OAChB0B,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAEtB,OAAQiC,S,oBAM/C,WACI,MAAgCZ,KAAKJ,MAA7BjB,EAAR,EAAQA,OAAQG,EAAhB,EAAgBA,YACV+B,EAAiBlC,EAAOmC,QAAO,SAAAC,GACjC,OAAOA,EAAMC,KAAKC,cAAcC,SAASpC,EAAYmC,kBAEzD,OAAQtC,EAAOwC,OAGP,sBAAKnC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWD,aAAciB,KAAKI,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUzB,OAAQkC,WAPlC,6C,GAvBMX,cCIHkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UAAkB,cAAC,EAAD,MAClBC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.56f6c7b0.chunk.js","sourcesContent":["import React from 'react';\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n    if (true) {\n        throw new Error('Nooooo!!')\n    }\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card\n                            key={i}\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input\n                className=\"pa3 ba b--green bg-lightest-blue\"\n                type='search'\n                placeholder='search robots'\n                onChange={searchChange} />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: \"scroll\", border: \"1px solid black\", height: \"500px\" }}>\n            {props.children}\n        </div>\n    )\n}\n\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    conponentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oooops. That is not good</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css'\n\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({ robots: users }));\n    }\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n    }\n\n    render() {\n        const { robots, searchfield } = this.state\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        return !robots.length ?\n            <h1>Loading</h1> :\n            (\n                <div className='tc'>\n                    <h1 className='f2'>RoboFriends</h1>\n                    <SearchBox searchChange={this.onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            )\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode><App /></React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}